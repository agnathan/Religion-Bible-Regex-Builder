use t::TestConfig;
use utf8;
use Data::Dumper;
use Config::General qw(SaveConfig);

plan tests => 2 * blocks;

run {
    my $block = shift;
    my $c = new Religion::Bible::Regex::Config($block->yaml); 
    my $r = new Religion::Bible::Regex::Builder($c);

    my $result = $r->key($block->book);
    my $expected = $block->key;
    chomp $expected;
    is_deeply($result, $expected, $block->name . ": with the canonical book name");

    SaveConfig("rcfile", $c->{config});

    $result = $r->key($block->abbreviation);
    $expected = $block->key;
    chomp $expected;
    is_deeply($result, $expected, $block->name . ": asking with an abbreviation");

};


__END__
=== one book, one abbreviation defined
--- yaml
---
books:
  1: 
    Match:
      Book: ['Genèse', 'Genese']
      Abbreviation: ['Ge']
    Normalized: 
      Book: "Genèse"
      Book: "Genèse"
      Abbreviation: "Ge"
  23: 
    Match:
      Book: ['Esaïe', 'Esaie', 'Ésaïe','Ésaie']
      Abbreviation: ['És', 'Esa']
    Normalized: 
      Book: Esaïe
      Abbreviation: Esa
--- key
1
--- book
Genèse
--- abbreviation
Ge

=== one books, three booknames, three abbreviations defined
--- yaml
---
books:
  9:
    Match:
      Book: ['1Samuel', '1 Samuel', '1 Samuel']
      Abbreviation: ['1S', '1 S', '1 S']
    Normalized: 
      Book: 1Samuel
      Abbreviation: 1S
--- key
9
--- book
1Samuel
--- abbreviation
1S

=== one books, three booknames, three abbreviations defined, asking for a key that is not defined
--- yaml
---
books:
  9: 
    Match:
      Book: ['1Samuel', '1 Samuel', '1 Samuel']
      Abbreviation: ['1S', '1 S', '1 S']
    Normalized: 
      Book: 1Samuel
      Abbreviation: 1S
--- key
1
--- book
Genèse
--- abbreviation
Ge
